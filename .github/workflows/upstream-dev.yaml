name: upstream-dev CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 18 * * 0" # Weekly "On Sundays at 18:00" UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-test-upstream-trigger:
    name: "Detect CI Trigger: [test-upstream]"
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.detect-trigger.outputs.trigger-found }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: xarray-contrib/ci-trigger@v1.2
        id: detect-trigger
        with:
          keyword: "[test-upstream]"

  upstream-dev:
    name: upstream-dev
    runs-on: ubuntu-latest
    needs: detect-test-upstream-trigger

    if: |
      always()
      && github.repository == 'umr-lops/xsarsea'
      && (
        github.event_name == 'schedule'
        || github.event_name == 'workflow_dispatch'
        || needs.detect-test-upstream-trigger.outputs.triggered == 'true'
        || contains(github.event.pull_request.labels.*.name, 'run-upstream')
      )

    defaults:
      run:
        shell: bash -l {0}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    steps:
      - name: checkout the repository
        uses: actions/checkout@v4
        with:
          # need to fetch all tags to get a correct version
          fetch-depth: 0 # fetch all branches and tags

      - name: set up conda environment
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: ci/requirements/environment.yaml
          environment-name: tests
          create-args: >-
            python=${{ matrix.python-version }}
            pytest-reportlog

      - name: install upstream-dev dependencies
        run: bash ci/install-upstream-dev.sh

      - name: install the package
        run: python -m pip install --no-deps -e .

      - name: show versions
        run: python -m pip list

      - name: import
        run: |
          python -c 'import xsarsea'

      - name: run tests
        if: success()
        id: status
        run: |
          python -m pytest -rf --report-log=pytest-log.jsonl

      - name: report failures
        if: |
          failure()
          && steps.tests.outcome == 'failure'
          && github.event_name == 'schedule'
        uses: xarray-contrib/issue-from-pytest-log@v1
        with:
          log-path: pytest-log.jsonl
